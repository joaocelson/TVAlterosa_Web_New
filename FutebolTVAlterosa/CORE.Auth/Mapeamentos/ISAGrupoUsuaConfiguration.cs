//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 28/08/2014 19:49:21
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Data.Entity.ModelConfiguration;
using CORE.Auth.Entidades;

namespace CORE.Auth.Mapeamentos
{

    public class ISAGrupoUsuaConfiguration : EntityTypeConfiguration<ISAGrupoUsua>
    {

        public ISAGrupoUsuaConfiguration()
        {
            this
                .HasKey(p => new { p.CDGRUPOUSUA })
                .ToTable("ISA_GRUPO_USUA");
            // Properties:
            this
                .Property(p => p.CDGRUPOUSUA)
                    .HasColumnName(@"CD_GRUPO_USUA")
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnType("varchar2");
            this
                .Property(p => p.NMGRUPOUSUA)
                    .HasColumnName(@"NM_GRUPO_USUA")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("varchar2");
            this
                .Property(p => p.DCGRUPOUSUA)
                    .HasColumnName(@"DC_GRUPO_USUA")
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnType("varchar2");
            this
                .Property(p => p.NMGRUPOREDECRPD)
                    .HasColumnName(@"NM_GRUPO_REDE_CRPD")
                    .HasMaxLength(100)
                    .HasColumnType("varchar2");
            // Association:
            this
                .HasMany(p => p.ISAGrupoTransacaos)
                    .WithRequired(c => c.ISAGrupoUsua)
                .HasForeignKey(p => new { p.CDGRUPOUSUA })
                    .WillCascadeOnDelete(false);
        }
    }
}
